{"version":3,"file":"static/js/925.5a26f552.chunk.js","mappings":"mJAGA,IAHgB,WACd,OAAO,wCACR,C,mHCiCD,EAjCkB,SAAC,GAAmB,IAAjBA,EAAgB,EAAhBA,UACXC,EAAuDD,EAAvDC,MAAOC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,SAAUC,EAAWL,EAAXK,OAC9CC,EAASJ,EAAW,8CACiBA,GACvCK,EACEC,EAAmBH,EACrBA,EAAOI,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,MACnC,iBACJ,OACE,iBAAKC,MAAO,CAAEC,QAAS,QAAvB,WACE,gBAAKC,IAAKT,EAAQU,IAAI,GAAGH,MAAO,CAAEI,MAAO,QACzC,gBAAIJ,MAAO,CAAEK,UAAW,QAAxB,WACE,yBACE,wBAAKjB,OAEP,yBACE,uCAAeE,QAEjB,yBACE,wCAEF,yBACE,uBAAIC,OAEN,yBACE,sCAEF,wBAAKI,SAIZ,E,6DC/BYW,EAAWC,EAAAA,GAAAA,EAAH,mFAMRC,EAAUD,EAAAA,GAAAA,IAAH,8CAIPE,EAAOF,EAAAA,GAAAA,GAAH,+DAKJG,EAAOH,EAAAA,GAAAA,GAAH,8DC2CjB,EApDqB,WAAO,IAAD,IACjBI,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAiCC,EAAAA,EAAAA,UAAS,MAA1C,eAAO5B,EAAP,KAAkB6B,EAAlB,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KACMC,GAAkBC,EAAAA,EAAAA,QAAM,oBAACT,EAASU,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAsBvD,OApBAC,EAAAA,EAAAA,YAAU,WACHN,IACLO,EAAAA,EAAAA,IAAMP,EACP,GAAE,CAACA,KAEJM,EAAAA,EAAAA,YAAU,WACRP,GAAU,GACVE,EAAS,KACTO,EAAAA,EAAAA,GAAYhB,GACTiB,MAAK,SAAAC,GACJb,EAAYa,EACb,IACAC,OAAM,SAAAX,GACLC,EAASD,EACV,IACAY,SAAQ,WACPb,GAAU,EACX,GACJ,GAAE,CAACP,KAGF,UAACH,EAAD,WACGS,IAAU,SAACe,EAAA,EAAD,KACX,SAAC1B,EAAD,WACE,SAAC,KAAD,CAAM2B,GAAIZ,EAAgBa,QAA1B,uBAGD/C,IAAa,SAAC,EAAD,CAAWA,UAAWA,KACpC,oDACA,UAACsB,EAAD,YACE,SAACC,EAAD,WACE,SAAC,KAAD,CAAMuB,GAAG,OAAT,qBAEF,SAACvB,EAAD,WACE,SAAC,KAAD,CAAMuB,GAAG,UAAT,2BAGJ,SAAC,EAAAE,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,qDCvDKT,EAAW,mCAAG,WAAMU,GAAN,iFACLC,MAAM,GAAD,OAJH,uCAIG,OACFD,EADE,oBAHR,mCAGQ,+CAEhBT,MAAK,SAAAW,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,wBACjC,IARiB,mFAAH,sDAWjB,K","sources":["components/Loading.js","components/MovieInfo.js","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.js","services/getOneMovie.js"],"sourcesContent":["const Loading = () => {\n  return <h2>.....Loading</h2>;\n};\nexport default Loading;\n","import imagNotFound from 'images/imagNotFound.png';\n\nconst MovieInfo = ({ movieInfo }) => {\n  const { title, poster_path, vote_average, overview, genres } = movieInfo;\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/original/${poster_path}`\n    : imagNotFound;\n  const normalizedGenres = genres\n    ? genres.map(item => item.name).join(', ')\n    : 'No information';\n  return (\n    <div style={{ display: 'flex' }}>\n      <img src={poster} alt=\"\" style={{ width: 300 }} />\n      <ul style={{ listStyle: 'none' }}>\n        <li>\n          <h2>{title}</h2>\n        </li>\n        <li>\n          <p>User Score {vote_average}</p>\n        </li>\n        <li>\n          <h3>Overwiev</h3>\n        </li>\n        <li>\n          <p>{overview}</p>\n        </li>\n        <li>\n          <h4>Genres</h4>\n        </li>\n        <li>{normalizedGenres}</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieInfo;\n","import styled from 'styled-components';\n\nexport const BackLink = styled.p`\n  padding: 5px;\n  margin-left: 15px;\n  font-size: 20px;\n`;\n\nexport const BoxInfo = styled.div`\n  margin-left: 20px;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n`;\n\nexport const Item = styled.li`\n  padding: 10px;\n  font-size: 20px;\n`;\n","import Loading from 'components/Loading';\nimport MovieInfo from 'components/MovieInfo';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport getOneMovie from 'services/getOneMovie';\nimport { BackLink, BoxInfo, Item, List } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [movieInfo, setMovieDet] = useState(null);\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState('');\n  const backLocationref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!error) return;\n    toast(error);\n  }, [error]);\n\n  useEffect(() => {\n    setLoader(true);\n    setError('');\n    getOneMovie(movieId)\n      .then(data => {\n        setMovieDet(data);\n      })\n      .catch(error => {\n        setError(error);\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  }, [movieId]);\n\n  return (\n    <BoxInfo>\n      {loader && <Loading />}\n      <BackLink>\n        <Link to={backLocationref.current}>Go back</Link>\n      </BackLink>\n\n      {movieInfo && <MovieInfo movieInfo={movieInfo} />}\n      <h3>Additional information</h3>\n      <List>\n        <Item>\n          <Link to=\"cast\">Cast</Link>\n        </Item>\n        <Item>\n          <Link to=\"reviews\">Reviews</Link>\n        </Item>\n      </List>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </BoxInfo>\n  );\n};\n\nexport default MovieDetails;\n","const BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst KEY = 'f8560092a6f6e40fc22fba47f695da5a';\n\nconst getOneMovie = async query => {\n  return await fetch(\n    `${BASE_URL}${query}?api_key=${KEY}&language=en-US&append_to_response=credits`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Something went wrong'));\n  });\n};\n\nexport default getOneMovie;\n\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n// https://api.themoviedb.org/3/search/movie?api_key={api_key}&query=Jack+Reacher\n"],"names":["movieInfo","title","poster_path","vote_average","overview","genres","poster","imagNotFound","normalizedGenres","map","item","name","join","style","display","src","alt","width","listStyle","BackLink","styled","BoxInfo","List","Item","movieId","useParams","location","useLocation","useState","setMovieDet","loader","setLoader","error","setError","backLocationref","useRef","state","from","useEffect","toast","getOneMovie","then","data","catch","finally","Loading","to","current","Suspense","fallback","query","fetch","response","ok","json","Promise","reject","Error"],"sourceRoot":""}