{"version":3,"file":"static/js/13.620c7b38.chunk.js","mappings":"kJAGA,IAHgB,WACd,OAAO,wCACR,C,oICCKA,EAAc,mCAAG,WAAMC,GAAN,iFACRC,MAAM,GAAD,OAJH,uCAIG,OACFD,EADE,4BAHR,mCAGQ,+CAEhBE,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,wBACjC,IARoB,mFAAH,sDAWpB,I,kBC+CA,EAvDgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACHF,IACLG,EAAAA,EAAAA,IAAMH,EACP,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACRH,GAAU,GACVE,EAAS,IACTlB,EAAeU,GACZP,MAAK,SAAAkB,GACJP,EAAUO,EAAKC,QAChB,IACAC,OAAM,SAAAN,GACLC,EAASD,EACV,IACAO,SAAQ,WACPR,GAAU,EACX,GACJ,GAAE,CAACN,KASF,2BACGK,IAAU,SAACU,EAAA,EAAD,KACX,wBACGZ,EAAOa,OAAS,EACfb,EAAOc,KAAI,SAAAC,GACT,OACE,yBACE,4BACE,oCAAYA,EAAKC,WACjB,uBAAID,EAAKE,cAHJF,EAAKG,GAOjB,KAED,2DAKT,C","sources":["components/Loading.js","services/getMovieReview.js","components/Reviews.js"],"sourcesContent":["const Loading = () => {\n  return <h2>.....Loading</h2>;\n};\nexport default Loading;\n","const BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst KEY = 'f8560092a6f6e40fc22fba47f695da5a';\n\nconst getMovieReview = async query => {\n  return await fetch(\n    `${BASE_URL}${query}/reviews?api_key=${KEY}&language=en-US&append_to_response=credits`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Something went wrong'));\n  });\n};\n\nexport default getMovieReview;\n","import { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\nimport getMovieReview from 'services/getMovieReview';\nimport Loading from './Loading';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [review, setReview] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!error) return;\n    toast(error);\n  }, [error]);\n\n  useEffect(() => {\n    setLoader(true);\n    setError('');\n    getMovieReview(movieId)\n      .then(data => {\n        setReview(data.results);\n      })\n      .catch(error => {\n        setError(error);\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  }, [movieId]);\n\n  // useEffect(() => {\n  //   getMovieReview(movieId).then(data => {\n  //     setReview(data.results);\n  //   });\n  // }, [movieId]);\n\n  return (\n    <div>\n      {loader && <Loading />}\n      <ul>\n        {review.length > 0 ? (\n          review.map(item => {\n            return (\n              <li key={item.id}>\n                <div>\n                  <h3>Author:{item.author}</h3>\n                  <p>{item.content}</p>\n                </div>\n              </li>\n            );\n          })\n        ) : (\n          <p>No reviews about this movie</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["getMovieReview","query","fetch","then","response","ok","json","Promise","reject","Error","movieId","useParams","useState","review","setReview","loader","setLoader","error","setError","useEffect","toast","data","results","catch","finally","Loading","length","map","item","author","content","id"],"sourceRoot":""}