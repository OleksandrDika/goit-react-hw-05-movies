{"version":3,"file":"static/js/910.3d4b9600.chunk.js","mappings":"wNAyDA,UAlDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACHF,IACLG,EAAAA,EAAAA,IAAMH,EACP,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACRH,GAAU,GACVE,EAAS,KACTG,EAAAA,EAAAA,GAAYX,GACTY,MAAK,SAAAC,GACJT,EAAQS,EAAKC,QAAQC,KACtB,IACAC,OAAM,SAAAT,GACLC,EAASD,EACV,IACAU,SAAQ,WACPX,GAAU,EACX,GACJ,GAAE,CAACN,KAGF,2BACGK,IAAU,SAAC,IAAD,KACX,eAAIa,MAAO,CAAEC,UAAW,QAAxB,SACGhB,EAAKiB,KAAI,SAAAC,GACR,IAAQC,EAA+CD,EAA/CC,GAAIC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,cAAeC,EAAcJ,EAAdI,UACnCC,EAASH,EAAY,8CACgBA,GACvCI,EACJ,OACE,yBACE,4BACE,gBAAKC,IAAKF,EAAQG,IAAI,GAAGX,MAAO,CAAEY,MAAO,QACzC,uBAAIN,KACJ,uBAAIC,QAJCH,EAQZ,QAIR,C,mCCpDD,IAHgB,WACd,OAAO,wCACR,C,qDCCKX,EAAW,mCAAG,WAAMoB,GAAN,iFACLC,MAAM,GAAD,OAJH,uCAIG,OACFD,EADE,oBAHR,mCAGQ,+CAEhBnB,MAAK,SAAAqB,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,wBACjC,IARiB,mFAAH,sDAWjB,K","sources":["components/Cast.js","components/Loading.js","services/getOneMovie.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\nimport getOneMovie from 'services/getOneMovie';\nimport Loading from './Loading';\nimport imagNotFound from 'images/imagNotFound.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cost, setCost] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!error) return;\n    toast(error);\n  }, [error]);\n\n  useEffect(() => {\n    setLoader(true);\n    setError('');\n    getOneMovie(movieId)\n      .then(data => {\n        setCost(data.credits.cast);\n      })\n      .catch(error => {\n        setError(error);\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      {loader && <Loading />}\n      <ul style={{ listStyle: 'none' }}>\n        {cost.map(item => {\n          const { id, profile_path, original_name, character } = item;\n          const poster = profile_path\n            ? `https://image.tmdb.org/t/p/original/${profile_path}`\n            : imagNotFound;\n          return (\n            <li key={id}>\n              <div>\n                <img src={poster} alt=\"\" style={{ width: 110 }} />\n                <p>{original_name}</p>\n                <p>{character}</p>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","const Loading = () => {\n  return <h2>.....Loading</h2>;\n};\nexport default Loading;\n","const BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst KEY = 'f8560092a6f6e40fc22fba47f695da5a';\n\nconst getOneMovie = async query => {\n  return await fetch(\n    `${BASE_URL}${query}?api_key=${KEY}&language=en-US&append_to_response=credits`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Something went wrong'));\n  });\n};\n\nexport default getOneMovie;\n\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n// https://api.themoviedb.org/3/search/movie?api_key={api_key}&query=Jack+Reacher\n"],"names":["movieId","useParams","useState","cost","setCost","loader","setLoader","error","setError","useEffect","toast","getOneMovie","then","data","credits","cast","catch","finally","style","listStyle","map","item","id","profile_path","original_name","character","poster","imagNotFound","src","alt","width","query","fetch","response","ok","json","Promise","reject","Error"],"sourceRoot":""}